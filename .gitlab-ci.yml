################################################################################
#
#  This file is part of SplashSync Project.
#
#  Copyright (C) Splash Sync <www.splashsync.com>
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  For the full copyright and license information, please view the LICENSE
#  file that was distributed with this source code.
#
#  @author Bernard Paquier <contact@splashsync.com>
#
################################################################################

################################################################
# Defined Pipeline Stages
stages:
  - docker
#  - tests_V12
#  - tests_V13
#  - deploy

################################################################
# Docker Init & Install Tests
################################################################

.docker:    &docker
    image:      docker:stable
    stage:      docker
    tags:
      - Dedicated-Docker
    services:
      - docker:dind
    variables:
      ODOO_LOG_LEVEL: ":INFO"
    ################################################################################
    # Install & Configure Environment
    before_script:
#      # Init Docker
#      - docker info
#      # Install Git & Docker Compose
#      - apk add --no-cache git docker-compose
#      # Load SplashPy Module
#      - rm -Rf ../Py-Core
#      - git clone --depth=1 https://github.com/SplashSync/PyCore.git ../Py-Core
#      - chmod 7777 -Rf ../Py-Core
#      # Configure Docker Compose
#      - sed -i 's|odoo:12|${ODOO_VERSION}|g' docker-compose.yml
#      # Build Docker Compose
#      - mkdir logs
#      - docker network create splashsync --attachable
      - sh ci/before_script.sh
    ################################################################################
    # Run Test Script
    script:
      - sh ci/start_odoo.sh
      # Wait Until Odoo Container Started
#      - docker-compose exec -T toolkit php bin/console
#      - docker-compose exec -T toolkit bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' odoo:8069)" != "200" ]]; do echo "Wait for Odoo..."; sleep 10; done'
#      - docker-compose logs --tail="2000" odoo >> logs/odoo.init.txt
#      # Run Splash Unit tests from Splash Toolkit
#      - docker-compose exec -T toolkit php vendor/bin/phpunit -c ${PHPUNIT_CONFIG}
#      - docker-compose logs --tail="2000" odoo >> logs/odoo.tests.txt
#      # Use Splash Toolkit to build Splash Manifest
#      - mkdir manifest
#      - docker-compose exec -T toolkit php bin/console splash:server:manifest
#      - docker-compose exec -T toolkit cat splash.json >> manifest/splash.json
#      - docker-compose exec -T toolkit cat splash.yml >> manifest/splash.yml
    ################################################################################
    # Run After Script
    after_script:
      - sh ci/after_script.sh

tests-V12:docker:
  <<: *docker
  variables:
#    PHPUNIT_CONFIG:   phpunit.contacts.xml
    ODOO_VERSION:     odoo:12

################################################################
# Functional Tests
################################################################

#.core_tests:    &core_tests
#    image:      docker:stable
#    stage:      tests_V12
#    retry:      2
#    tags:
#      - Dedicated-Docker
#    services:
#      - docker:dind
#    ################################################################################
#    # Install & Configure Environment
#    before_script:
#      # Init Docker
#      - docker info
#      # Install Git & Docker Compose
#      - apk add --no-cache git docker-compose
#      # Load SplashPy Module
#      - rm -Rf ../Py-Core
#      - git clone --depth=1 https://github.com/SplashSync/PyCore.git ../Py-Core
#      - chmod 7777 -Rf ../Py-Core
#      # Configure Docker Compose
#      - sed -i 's|odoo:12|${ODOO_VERSION}|g' docker-compose.yml
#      # Build Docker Compose
#      - mkdir logs
#      - docker network create splashsync --attachable
#      - docker-compose up -d
#    ################################################################################
#    # Run Test Script
#    script:
#      # Wait Until Odoo Container Started
#      - docker-compose exec -T toolkit php bin/console
#      - docker-compose exec -T toolkit bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' odoo:8069)" != "200" ]]; do echo "Wait for Odoo..."; sleep 10; done'
#      - docker-compose logs --tail="2000" odoo >> logs/odoo.init.txt
#      # Run Splash Unit tests from Splash Toolkit
#      - docker-compose exec -T toolkit php vendor/bin/phpunit -c ${PHPUNIT_CONFIG}
#      - docker-compose logs --tail="2000" odoo >> logs/odoo.tests.txt
#      # Use Splash Toolkit to build Splash Manifest
#      - mkdir manifest
#      - docker-compose exec -T toolkit php bin/console splash:server:manifest
#      - docker-compose exec -T toolkit cat splash.json >> manifest/splash.json
#      - docker-compose exec -T toolkit cat splash.yml >> manifest/splash.yml
#    ################################################################################
#    # Run After Script
#    after_script:
#      - docker-compose stop
#      - docker-compose logs --tail="2000" odoo >> logs/odoo.all.txt
#    artifacts:
#      paths:
#        - logs
#        - manifest
#
#tests-V12:contacts:
#  <<: *core_tests
#  variables:
#    PHPUNIT_CONFIG:   phpunit.contacts.xml
#    ODOO_VERSION:     odoo:12
#
#tests-V12:products:
#  <<: *core_tests
#  variables:
#    PHPUNIT_CONFIG:   phpunit.products.xml
#    ODOO_VERSION:     odoo:12
#
#tests-V12:orders:
#  <<: *core_tests
#  variables:
#    PHPUNIT_CONFIG:   phpunit.orders.xml
#    ODOO_VERSION:     odoo:12
#
#tests-V12:invoices:
#  <<: *core_tests
#  variables:
#    PHPUNIT_CONFIG:   phpunit.invoices.xml
#    ODOO_VERSION:     odoo:12


#################################################################
## Build Documentation
#################################################################
#pages:
#    image:      registry.gitlab.com/splashsync/php-console:pages
#    stage:      deploy
#    retry:      2
#    tags:
#      - Dedicated
#    ################################################################################
#    # Run Test Script
#    script:
#      # Run Composer to Build Dependencies
#      - curl -s https://raw.githubusercontent.com/BadPixxel/Php-Sdk/main/ci/composer.sh  | bash
#      # Build Documentation
#      - php vendor/bin/grumphp run --tasks=build-docs
#    artifacts:
#        paths:
#            - public